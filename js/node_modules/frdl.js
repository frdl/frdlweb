/* webfan (C) Till Wehowski, Webfan.de - All rights reserved. */
(function(_$global) {
	
	
const __NAMESPACE__ = 'frdl';	
	
	
const ES6 = 'es6';
const scriptTypes = {
	       [ES6] : ES6	
};


const JS_TARGET = String(scriptTypes[ES6]) + '!';



let STAGE = 'DEFAULTS';


requirejs.config({
    context : __NAMESPACE__,
    inlineRequire : false,
    waitSeconds : 90,
    baseUrl: 'https://webfan.de/cdn/application/webfan/node_modules',
    paths: {
        library: 'https://webfan.de/cdn/frdl/flow/libraries/flow',
        [ES6] : 'es6/es6',
        'amd-loader': 'amd-loader/frdlweb/amd-loader'
    },
    

    jsTarget : JS_TARGET,
    
    
    shim: {
       
        'frdl-STAGE-LEGACY': {
            deps: ['https://api.webfan.de/api-d/4/js-api/library.js?package=webfan-websites&scripts=,options,'],
            exports: __NAMESPACE__,
            init: function ( legacyExports) {
              //    alert(this.frdl.noConflict().toString());
                requirejs(['frdl-$rootScope'])._$rootScope = this.frdl.noConflict();
                return requirejs(['frdl-$rootScope']);
            }
        },
        
        'frdl-STAGE-STABLES': {
            deps: [ 'https://api.webfan.de/api-d/4/js-api/library.js'],
            exports: __NAMESPACE__,
            init: function (legacyExports) {
                requirejs(['frdl-$rootScope'])._$rootScope = this.frdl.noConflict();
                return requirejs(['frdl-$rootScope']);
            }
        },
        
        'frdl-STAGE-BETAS': {
            deps: ['amd-loader', 'library/dev1'],
            exports: __NAMESPACE__,
            init: function ( amdLoader, legacyExports) {
                requirejs(['frdl-$rootScope']) = this.frdl.noConflict();
                return requirejs(['frdl-$rootScope']);
            }
        },
        
        'frdl-STAGE-EXPERIMENTAL': {
            deps: [ 'amd-loader', 'library/dev8'],
            exports: __NAMESPACE__,
            init: function ( amdLoader, legacyExports) {
                requirejs(['frdl-$rootScope'])._$rootScope = this.frdl.noConflict();
                return requirejs(['frdl-$rootScope']);
            }
        },
        
        'frdl-STAGE-DEFAULTS': {
            deps: [ 'amd-loader', JS_TARGET + 'library/library'],
            exports: __NAMESPACE__,
            init: function (amdLoader, legacyExports) {
                requirejs(['frdl-$rootScope'])._$rootScope = this.frdl.noConflict();
                return requirejs(['frdl-$rootScope']);
            }
        }
    }
});






//e, t, n
//define(requirejs.config.jsTarget, ["amd-loader", 'es6', "module", "require", "frdl"], function(amdLoader, es6Compiler, module, require, mockFrdl) {
 //     return amdLoader(requirejs.config.jsTarget, "frdl."+requirejs.config.jsTarget, es6Compiler);
//});

// !frdl.fs5 
//function frdl(){
//	
//}



define(__NAMESPACE__, ['require', 'exports', 'module'], function(require, exports, module) {


(function(_$) {
  _$._$rootScope = _$;
  define("frdl-$rootScope",  function() {
      return _$;
  });
}(exports));


let CoreStub = module.exports = function(){
	
};	
	
	
  var isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
   isWebWorker = !isBrowser && typeof importScripts !== 'undefined';



  
  if(!isWebWorker && !!isBrowser){
    	var hT = document.querySelector('head[frdl-stage]')
    	if(null!==hT)STAGE=hT.getAttribute('frdl-stage');
    	
    	requirejs(['frdl-$rootScope'])._$rootScope = requirejs(['frdl-STAGE-'+STAGE]);
  }





function _cstck(){
	if('undefined'===typeof exports.CoreStub.callstack){
		  var _cache = requirejs(['CacheJS']);
		  
		  exports.CoreStub.callstack = _cache.install('localStorage');
	}
}



function __call(name, args){
	 _cstck();
	 
	 exports.CoreStub.callstack.set({method:name,args:args},{_return:null}, 3600, {context:__NAMESPACE__,STAGE:STAGE, jsTarget:requirejs.config.jsTarget});
	 
	 if('function'===typeof requirejs(['frdl-$rootScope'])[name]){
	 	 var _r = requirejs(['frdl-$rootScope'])[name].apply(this, [args]);
	 	 exports.CoreStub.callstack.set({method:name,args:args},{_return:_r}, 3600, {context:__NAMESPACE__,STAGE:STAGE, jsTarget:requirejs.config.jsTarget});
	 	 return _r;
	 }
	 
	 
	 alert('Cannot handle method signature __call(' + JSON.stringify(arguments)+')');
}


function __get(name){
	 _cstck();
	
	 exports.CoreStub.callstack.set({method:__get,args:name},{_return:null}, 3600, {context:__NAMESPACE__,STAGE:STAGE, jsTarget:requirejs.config.jsTarget});
	
	 alert('ToDo: __call('+JSON.stringify(arguments)+')');
}









/*    CoreStub.overload = overload;  */
(function() {
            var _ObjectFlow = function() {
                var _Obj = {
                    inherit: function($parent, _new) {
                        var sup = $parent,
                            base = _new;
                        var descriptor = Object.getOwnPropertyDescriptor(base.prototype, "constructor");
                        base = Object.create(sup.prototype);
                        var handler = {
                            constructor: function(target, args) {
                                var obj = Object.create(base.prototype);
                                this.apply(target, obj, args);
                                return obj;
                            },
                            apply: function(target, that, args) {
                                base.apply(that, args);
                            }
                        };
                        var proxy = new Proxy(base, handler);
                        descriptor.value = proxy;
                        descriptor.configurable = true;
                        descriptor.writable = true;
                        try {
                            Object.defineProperty(base.__proto__, "constructor", descriptor);
                        } catch (err) {
                            if (!!console)
                                console.error(err);
                        }
                        return proxy;
                    },
                    extend: function(sup, base) {
                        var descriptor = Object.getOwnPropertyDescriptor(base.prototype, "constructor");
                        base = Object.create(sup.prototype);
                        var handler = {
                            constructor: function(target, args) {
                                var obj = Object.create(base.prototype);
                                this.apply(target, obj, args);
                                return obj;
                            },
                            apply: function(target, that, args) {
                                sup.apply(that, args);
                                base.apply(that, args);
                            }
                        };
                        var proxy = new Proxy(base, handler);
                        descriptor.value = proxy;
                        descriptor.configurable = true;
                        descriptor.writable = true;
                        try {
                            Object.defineProperty(base.__proto__, "constructor", descriptor);
                        } catch (err) {
                            if (!!console)
                                console.error(err);
                        }
                        return proxy;
                    }
                };
                return Object.create(_Obj);
            };
            var OverloadableObject = _ObjectFlow;
            OverloadableObject.prototype.__noSuchMethod__ = function(name, args) {
                if ('function' === typeof this.__call)
                    return this.__call(name, args);
                if (!!console)
                    console.warn('Method ' + name + ' of overloaded object and magic method __call is not defined!');
            };
            var $FRDL = _ObjectFlow().inherit(OverloadableObject, Object.create(Function));
            var $I = {
                has: function(target, name) {
                   return true;
                },
                get: function(target, name, receiver) {
                      if (name in target.__proto__) {
                        return target.__proto__[name];
                    }
                    if (name in receiver.__proto__) {
                        return receiver.__proto__[name];
                    }
                    return function() {
                        try {
                            var args = Array.prototype.slice.call(arguments);
                            if ('function' === typeof receiver.__call) return receiver.__call(name, args);
                        } catch (err) {
                            if (!!console) console.error(err);
                        }
                        
                        
                        

                          
                        this.valueOf = function(){
							 return Symbol.for('@ToDo: '+name+'.valueOf()');
						};
                   };
                },
                apply: function(target, THIS, args) {
                    target.apply(THIS, args);
                    this.apply(THIS, args);
                }
            };
            try {
                var $IO = Object.create($FRDL, $I);
                $IO.__magic_proxy = new Proxy(OverloadableObject, $I);
            } catch (err) {
                if (!!console)
                    console.error(err);
            }

            function overload(obj, fn) {
                var o = Object.create($IO.__magic_proxy, obj);
                if ('function' === typeof fn) {
                    o.__call = fn;
                }else if(fn instanceof Array){
					o.__call = fn[0];
					o.__get = fn[1];
				}
                return o;
            }
            
   CoreStub.overload = overload;         
}());          
         
         
         
  exports = CoreStub.overload(
  exports,
   [__call, __get]);       
   
   
   


 
  exports.CoreStub = CoreStub;  
  return exports;          
});




   _$global[__NAMESPACE__] = requirejs([__NAMESPACE__]);
   
}(this));        



var frdl = require('frdl');




